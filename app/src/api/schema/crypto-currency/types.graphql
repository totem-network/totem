type CryptoCurrency {
    balance: String
    data: CryptoCurrencyData
    decimals: Int
    icon: String
    name: String
    price: String
    symbol: String
}

type NativeCurrencyData {
    network: String
    platform: String
}

type TokenData {
    contract: String
    network: String
    platform: String
}

union CryptoCurrencyData = NativeCurrencyData | TokenData

type ExchangeCryptoCurrency {
    address: String
    decimals: Int
    name: String
    rateEth: String
    rateUsd: String
    symbol: String
}

type AddTokenResponse {
    cryptoCurrency: CryptoCurrency
    result: Boolean
}

type SendCryptoCurrencyResponse {
    result: Boolean
    transactionHash: String
}

type Query {
    cryptoCurrencies(address: String): [CryptoCurrency]
    cryptoCurrenciesOnExchange: [ExchangeCryptoCurrency]
}

type Mutation {
    addToken(contract: String!): AddTokenResponse
    sendCryptoCurrency(currencyOrToken: String!, amount: String!, to: String!, fee: String!): SendCryptoCurrencyResponse
}